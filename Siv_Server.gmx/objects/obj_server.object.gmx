<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Server
port=7777;
server = network_create_server(network_socket_tcp,port,32);

va1=0;
va2=0;

buff_chunk = buffer_create(8*1000,buffer_fast,1);

sock = 0;

con = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create chunk
chunk_loading = true;
chunk_mod_load = false;
chunk_loading = true;
check_block = false;

file_chunk = "map1.dat";
read_chunk = file_text_open_read(file_chunk);
var chx=file_text_read_real(read_chunk),chy=file_text_read_real(read_chunk),chz=file_text_read_real(read_chunk);
//file_text_readln(read_chunk);
var xi=0,yi=0,zi=0,i1=0,i2=0,i3=0;
chunk_file_read = false;
array3d_create(chx,chy,chz);
chunk_file_read = true;
loaded = 0;
load_num = 0;
repeat(chx)
{
    repeat(chy)
    {
        repeat(chz)
        {
            var obj = instance_create(xi,yi,obj_chunk);
            obj.z=zi;
            obj.myload = loaded;
            loaded += 1;
            array3d_set(i1,i2,i3,obj);
            obj.myi1=i1;
            obj.myi2=i2;
            obj.myi3=i3;
            zi += 100;
            i3+=1;
            
        }
        yi += 100;
        zi = 0;
        i2+=1;
        i3=0;
    }
    xi += 100;
    yi = 0;
    i1+=1;
    i2=0;
}

x = (chx*100)/2;
y = (chy*100)/2;
z = (chz*100)+20;

chunk_num_x = chx;
chunk_num_y = chy;
chunk_num_z = chz;

num_chunks = loaded;

///BUFF for refreshing chunks
chunk_buffer_num = 0;
chunk_buffer_count = 0;
chunk_buffered = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (con == true)
{
buffer_seek(buff_chunk,buffer_seek_start,0);

repeat(10){repeat(10){repeat(10){
buffer_write(buff_chunk,buffer_u8,random(round(200)));}}}

network_send_packet(sock,buff_chunk,buffer_tell(buff_chunk));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Chunks
if (chunk_loading==true)
{
    if (load_num &lt; num_chunks)
    {
        with(obj_chunk)
        {
            if (myload==other.load_num)
            {
                x = file_text_read_real(obj_control.read_chunk);
                y = file_text_read_real(obj_control.read_chunk);
                z = file_text_read_real(obj_control.read_chunk);
                myi1 = file_text_read_real(obj_control.read_chunk);
                myi2 = file_text_read_real(obj_control.read_chunk);
                myi3 = file_text_read_real(obj_control.read_chunk);
                with (obj_control){array3d_set(other.myi1,other.myi2,other.myi3,other.id);}
                array3d_create(10,10,10);
                chunk_size = 10;
                bsize = 10;
            }
        }
        load_num += 1;
    }
    else
    {
        chunk_loading = false;
        load_num = 0;
        chunk_mod_load = true;
        file_text_close(read_chunk);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");
if(eventid==server)
{
    //show_message("new_client");
    var t = ds_map_find_value(async_load, "type");
    sock = ds_map_find_value(async_load, "socket");
    if(t==network_type_connect)
    {
        con = true;
    }
    else
    {
        con = false;
    }
}
else
{
    var buff = ds_map_find_value(async_load, "buffer");
    va1=buffer_read(buff, buffer_u8);
    va2=buffer_read(buff, buffer_u8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(f_main);
draw_set_color(c_green);
draw_text(10,10,"Server running "+string(va1)+","+string(va2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
