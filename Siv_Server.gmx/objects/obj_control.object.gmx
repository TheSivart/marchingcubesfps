<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Log INIT
scr_log_create(300);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Server
port=7777;
server = network_create_server(network_socket_tcp,port,32);
scr_log("server started with port 7777");

temp_x=0;
temp_y=0;
temp_z=0;
temp_dir=0;
temp_zdir=0;
temp_dead=0;
temp_name = "";
temp_type=0;
temp_size=0;
temp_text = "";
temp_kills=0;
temp_deaths=0;
temp_verify=0;

sock = 0;

con = false;

buff = 0;

str = "";

new_height=room_height;

tx=room_width/2;
ty=room_height/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buffers
buff_chunk = buffer_create((8*1000)+(8*3)+8+8+8,buffer_fast,1);
buff_chunk_small = buffer_create((8*3)+8+8+8,buffer_fast,1);
//x,y,z,id,sock,master
buff_pos = buffer_create((16*5)+(8*4),buffer_fixed,1); 
//sock,id
buff_diss = buffer_create(8+8,buffer_fast,1); 
//x,y,z,id,type,size,sock
buff_edit = buffer_create((16*5)+8+8+8+8,buffer_fixed,1);
//width,length,height,id
buff_map = buffer_create(8*4,buffer_fast,1); 
//x,y,z,xsp,ysp,zsp,type,ss,sp,size
buff_shoot = buffer_create((16*9)+8+8,buffer_fixed,1);
//sock,name,kills,deaths
buff_name = buffer_create((32*10)+8+8+8+8+8,buffer_grow,1);
//message to show when a player dies
buff_kill_message = buffer_create((32*6)+8+8+8,buffer_grow,1);
//string
buff_chat = buffer_create((32*10)+8+8+8+8+8,buffer_grow,1);

scr_log("buffers created");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create chunk
chunk_loading = true;
chunk_mod_load = false;
chunk_loading = true;
check_block = false;

net_send_buff = 0;
net_send_buff_count = 0;
net_send_buff_can = false;

file_chunk = "mapmid.dat";
read_chunk = file_text_open_read(file_chunk);
var chx=file_text_read_real(read_chunk),chy=file_text_read_real(read_chunk),chz=file_text_read_real(read_chunk);
//file_text_readln(read_chunk);
var xi=0,yi=0,zi=0;
i1=0;
i2=0;
i3=0;
val=0;
loaded=true;
chunk_file_read = false;
array3d_create(chx,chy,chz);
chunk_file_read = true;
loaded = 0;
load_num = 0;
repeat(chx)
{
    repeat(chy)
    {
        repeat(chz)
        {
            var obj = instance_create(xi,yi,obj_chunk);
            obj.z=zi;
            obj.myload = loaded;
            loaded += 1;
            array3d_set(i1,i2,i3,obj);
            obj.myi1=i1;
            obj.myi2=i2;
            obj.myi3=i3;
            zi += 100;
            i3+=1;
            //scr_log("chunk created x="+string(i1)+",y="+string(i2)+",z="+string(i3));
            
        }
        yi += 100;
        zi = 0;
        i2+=1;
        i3=0;
    }
    xi += 100;
    yi = 0;
    i1+=1;
    i2=0;
}

chunk_num_x = chx;
chunk_num_y = chy;
chunk_num_z = chz;

num_chunks = loaded;

icheck = 0;

tsock=0;

///BUFF for refreshing chunks
chunk_buffer_num = 0;
chunk_buffer_count = 0;
chunk_buffered = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Vars
full0=0;
full1=0;
full2=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update chunks
with(obj_sock)
{
    with(obj_chunk)
    {
        if(buf==true)
        {
            scr_check_full();
            scr_pack_chunk_send(other.sock);
        }
    }
}
with(obj_chunk)
{
    buf=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Chunks
if (chunk_loading==true)
{
    if (load_num &lt; num_chunks)
    {
        chunk_file_read=true;
        with(obj_chunk)
        {
            if (myload==other.load_num)
            {
                x = file_text_read_real(obj_control.read_chunk);
                y = file_text_read_real(obj_control.read_chunk);
                z = file_text_read_real(obj_control.read_chunk);
                myi1 = file_text_read_real(obj_control.read_chunk);
                myi2 = file_text_read_real(obj_control.read_chunk);
                myi3 = file_text_read_real(obj_control.read_chunk);
                with (obj_control){array3d_set(other.myi1,other.myi2,other.myi3,other.id);}
                array3d_create(10,10,10);
                
                chunk_size = 10;
                bsize = 10;
            }
        }
        load_num += 1;
    }
    else
    {
        chunk_loading = false;
        with(obj_chunk){scr_check_full();}
        show_debug_message("Number of Chunks:"+string(load_num));
        load_num = 0;
        chunk_mod_load = true;
        file_text_close(read_chunk);
    }
}
else
{
    full0=0;
    full1=0;
    full2=0;
    with(obj_chunk)
    {
        switch(full)
        {
            case(0):
                other.full0+=1;
            break;
            case(1):
                other.full1+=1;
            break;
            case(2):
                other.full2+=1;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send Data
with(obj_sock)
{
    scr_pack_pos_send();
}
/*
if(chunk_loading == false&amp;&amp;con==true)
{
    with(obj_chunk)
    {
        if (net_send_buff==obj_control.net_send_buff_count)
        {
            scr_send_chunk();
            obj_control.net_send_buff_can = true;
        }
    }
    if(net_send_buff_can == true)
    {
        net_send_buff_can = false;
        net_send_buff_count += 1;
    }
}
/*
if (con == true)
{
buffer_seek(buff_chunk,buffer_seek_start,0);

repeat(10){repeat(10){repeat(10){
buffer_write(buff_chunk,buffer_u8,random(round(200)));}}}

network_send_packet(sock,buff_chunk,buffer_tell(buff_chunk));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///screen resize
if (window_get_width() != view_wview || window_get_height() != view_hview)
{
    scr_set_window_size(window_get_width(),window_get_height());
    mid_x = window_get_width()/2;
    mid_y = window_get_height()/2;
    www=view_wview;
    hhh=view_hview;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");
if(eventid==server)
{
    scr_connect_disconnect_client();
}
else
{
    buff = ds_map_find_value(async_load, "buffer");
    sock = ds_map_find_value(async_load, "id");
    var pack_id=buffer_read(buff,buffer_u8);
    switch(pack_id)
    {
        case(pack_pos):
            scr_pack_pos_recieve();
        break;
        case(pack_edit):
            scr_pack_edit_recieve();
        break;
        case(pack_shoot):
            scr_pack_shoot_recieve();
        break;
        case(pack_name):
            scr_pack_name_recieve();
        break;
        case(pack_kill_message):
            scr_pack_show_message_recieve();
        break;
        case(pack_chat):
            scr_pack_chat_recieve();
        break;
        case(pack_verify):
            scr_pack_verify_recieve();
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI
d3d_set_lighting(false);
draw_set_color(c_white);
draw_set_font(f_main);
tx=room_width/2;
ty=room_height/2;
//draw_text(10,10,"FPS: "+string(fps)+"/"+string(room_speed));

if (chunk_loading == true)
{
    scr_gui_loading_bar();
}
else
{
    draw_set_font(f_main);
    draw_set_color(c_white);

    scr_gui_player_list();
    scr_draw_log();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
