<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start 3D
network = true;
debug = global.set_debug;
debug_message = true;
debug_message_id = 1;
cam_debug = true;
d3d_start();
d3d_set_culling(true);

if (os_browser!=browser_not_a_browser)
{
    mid_x = browser_width/2;
    mid_y = browser_height/2;
    www=room_width;
    hhh=room_height;
    ren_dis = 500;
}
else
{
    mid_x = room_width/2;
    mid_y = room_height/2;
    www=room_width;
    hhh=room_height;
    ren_dis = 50000;
    tf_init();
    texture_set_filtering(1);
}

x = 0;
y = 0;
z = 0;

direction = 0;
zdir = 0;

cx = x;
cy = y;
cz = z;

hitx=0;
hity=0;
hitz=0;

xto=0;
yto=0;
zto=0;

cam_off = 0;
cam_offx = 0;
cam_offy = 0;

window_set_cursor(cr_none);
cam_mouse_toggle = true;

zoom = 110;

x_grav = 0;
y_grav = 0;
z_grav = 0;

grav_power = 0.2;
fric_power = 0.4;

fname = "";
fsave = 0;

mouse_change_x=0;
mouse_change_y=0;

mouse_x_p = mouse_x;
mouse_y_p = mouse_y;

show_debug_message("Start 3D - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player stats
hp = 100;
dead=true;
shoot_power = 0;
shoot_type = 0;
randomize();
name=global.name;
my_kills = 0;
my_deaths = 0;

death_message = "";
dm_alpha = 0;
dm_time = 0;

can_shoot = true;
shoot_time = 0;
shoot_delay = 0.4*room_speed;

show_debug_message("Player stats - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///graphics vars

//blood overlay
blood_alpha = 0;

show_debug_message("graphics vars - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Textures
tex_floor = background_get_texture(tex_grass);
tex_block = background_get_texture(tex_multi);
tex_block2 = background_get_texture(tex_multi_2);
tex_bound = sprite_get_texture(spr_bound,0);
tex_fire = background_get_texture(tex_ex);
tex_fire_blue = background_get_texture(tex_ex_blue);
tex_world = background_get_texture(tex_planet);

show_debug_message("Load Textures - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Settings from INI
ini_open("sett.ini");
sett_win_width=ini_read_real("Window Settings","win_width",1280);
sett_win_height=ini_read_real("Window Settings","win_height",720);
sett_win_x=ini_read_real("Window Settings","win_x",10);
sett_win_y=ini_read_real("Window Settings","win_y",10);
ini_close();
//alarm[0]=2;

show_debug_message("Load Settings from INI - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create chunk vars

//loading alarm
//alarm[0]=60;
downloaded = false;
chunk_mod_load = false;
chunk_loading = true;
check_block = false;
chunk_skip = false;

debug_chunks_created = 0;

chunk_file_read = false;
array3d=0;
mod_point = 0;
num_chunks = 0;
load_num = 0;

chunk_num_x=0;
chunk_num_y=0;
chunk_num_z=0;

///BUFF for refreshing chunks
chunk_buffer_num = 0;
chunk_buffer_count = 0;
chunk_buffered = false;

show_debug_message("Create chunk vars - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting
d3d_set_lighting(true);
d3d_light_define_ambient(c_dkgray);
d3d_light_enable(1,true);

normal_x = 0;
normal_y = 0;
normal_z = 0;

show_debug_message("lighting - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NETWORKING
if (network==true)
{
    
    port = 7777;
    sock = 0;
    client = network_create_socket(network_socket_tcp);
    //if(show_question("thesivart.ca?"))
    {
        //var error = network_connect(client,"thesivart.ca",port);
    }
    //else
    
    {
        var error = network_connect(client,global.set_ip,port);
        //var error = network_connect(client,"192.168.100.133",port);
    }
    if(error!=0)
    {
        show_message(error);
        show_message("connect to server");
        game_end();
    }
    
    //alarm[2]=10
    
    //SEND BUFFERS
    //x,y,z,direction,zdir,id
    buff_pos = buffer_create((16*5)+8+8,buffer_fixed,1); 
    //x,y,z,id,type,size
    buff_edit = buffer_create((16*3)+8+8+8,buffer_fixed,1); 
    //x,y,z,xsp,ysp,zsp,type,ss,sp,size
    buff_shoot = buffer_create((16*9)+8,buffer_fixed,1); 
    //name,kills,deaths
    buff_name = buffer_create((32*5)+8+8+8+8,buffer_grow,1);
    //message to show when a player dies
    buff_kill_message = buffer_create((32*5)+8+8,buffer_grow,1);
    //id,pack id
    buff_verify = buffer_create(8*6,buffer_fast,1); 
    //chat
    buff_chat = buffer_create((32*5)+8+8+8+8,buffer_grow,1);
    alarm[1]=30;
    
    net_x=0;
    net_y=0;
    net_z=0;
    net_direction=0;
    net_zdir=0;
    net_dead=0;
    net_type = 0;
    net_size = 0;
    net_name = "";
    net_text = "";
    net_kills = 0;
    net_deaths = 0;
    
    net_sock=0;
    net_sock2=0;
    
    new_sock = false;
    
    //for checking who hit us last
    last_hit = 0;
    last_hit_name = "";
    
    net_myi1=0;
    net_myi2=0;
    net_myi3=0;
    
    buff = 0;
}

show_debug_message("NETWORKING - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Convert prepare
Convert_Prepare(1,1,1,2,2,2,1,1,1,1,1);
Convert_3d(0,0,0,x,y,z);
Convert_2d(0,0,x,y,z);

show_debug_message("Convert Prepare - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug vars
ary_x=0;
ary_y=0;
ary_z=0;
ary_str="";
ary_num=0;

show_debug_message("debug vars - Done");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound
audio_master_gain(0.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///chat
scr_chat_create(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to server
var error = network_connect(client,"192.168.100.133",port);
//global.set_ip="127.0.0.1";
//var error = network_connect(client,global.set_ip,port);
    
if(error!=0)
{
    show_message(error);
    show_message("connect to server");
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Network send name
scr_pack_name_send();
alarm[1]=30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set windows size from file
//window_set_size(sett_win_width,sett_win_height);
//window_set_position(sett_win_x,sett_win_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chunk Update Buffer
//*
with(obj_chunk)
{
    if (buf==true&amp;&amp;my_buf==obj_control.chunk_buffer_count)
    {
        scr_update_chunk();
        obj_control.chunk_buffered = true;
        buf=false;
    }
}
if (chunk_buffered==true)
{
    chunk_buffer_count += 1;
    chunk_buffered = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
//create temp vars
var sp=1.5*(room_speed/fps),xto=x,yto=y,zto=z;


if (chunk_loading==false)
{   
    if (cam_mouse_toggle==true)
    {
        if (keyboard_check(ord("W")))
        {
            xto+=lengthdir_x(sp,direction);
            yto+=lengthdir_y(sp,direction);
        }
        if (keyboard_check(ord("S")))
        {
            xto+=lengthdir_x(sp,direction+180);
            yto+=lengthdir_y(sp,direction+180);
        }
        if (keyboard_check(ord("A")))
        {
            xto+=lengthdir_x(sp,direction+90);
            yto+=lengthdir_y(sp,direction+90);
        }
        if (keyboard_check(ord("D")))
        {
            xto+=lengthdir_x(sp,direction-90);
            yto+=lengthdir_y(sp,direction-90);
        }
    }
    z_grav -= grav_power*(room_speed/fps);
    if (scr_col_pos(x,y,z-2)==true)
    {
        if (cam_mouse_toggle==true)
        {
            if keyboard_check(vk_space)
            {
                z_grav = 3+(1*(room_speed/fps));
            }
        }
        if(x_grav&gt;=fric_power){x_grav-=fric_power}else
        if(x_grav&lt;=-fric_power){x_grav+=fric_power}else
        {x_grav=0;}
        if(y_grav&gt;=fric_power){y_grav-=fric_power}else
        if(y_grav&lt;=-fric_power){y_grav+=fric_power}else
        {y_grav=0;}
    }
    zto+=z_grav;
    xto+=x_grav;
    yto+=y_grav;
    
    var ramp=11;
    
    if (scr_col_pos(xto,y,z)==false){x=xto;}else{if (scr_col_pos(xto,y,z+ramp)==false){x=xto;z+=ramp;cam_offx-=ramp;}else{x_grav=0;}}
    if (scr_col_pos(x,yto,z)==false){y=yto;}else{if (scr_col_pos(x,yto,z+ramp)==false){y=yto;z+=ramp;cam_offy-=ramp;}else{y_grav=0;}}
    if (scr_col_pos(x,y,zto)==false){z=zto;}else{z_grav=0;}
    if (scr_col_pos(x,y,z)==true){hp-=1;blood_alpha=0.7+random(0.3);}
    if (cam_offx+sp&lt;0){cam_offx+=sp;}else{cam_offx=0;}
    if (cam_offy+sp&lt;0){cam_offy+=sp;}else{cam_offy=0;}
    cam_off=cam_offx+cam_offy;
}
else
{
    if (cam_mouse_toggle==true)
    {
        sp=sp*2;
        if (keyboard_check(ord("W")))
        {
            x+=lengthdir_x(lengthdir_x(sp,zdir),direction);
            y+=lengthdir_y(lengthdir_x(sp,zdir),direction);
            z+=lengthdir_y(sp,zdir);
        }
        if (keyboard_check(ord("S")))
        {
            x+=lengthdir_x(lengthdir_x(sp,zdir),direction+180);
            y+=lengthdir_y(lengthdir_x(sp,zdir),direction+180);
            z-=lengthdir_y(sp,zdir);
        }
        if (keyboard_check(ord("A")))
        {
            x+=lengthdir_x(sp,direction+90);
            y+=lengthdir_y(sp,direction+90);
        }
        if (keyboard_check(ord("D")))
        {
            x+=lengthdir_x(sp,direction-90);
            y+=lengthdir_y(sp,direction-90);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot
if (can_shoot==true&amp;&amp;cam_mouse_toggle==true)
{
    if (mouse_check_button(mb_left))
    {
        shoot_type = 1;
        shoot_power=60;
        var obj = instance_create(x,y,obj_bomb);
        obj.z = z;
        obj.xsp=(cx-x)/100;
        obj.ysp=(cy-y)/100;
        obj.zsp=(cz-z)/100;
        obj.type=shoot_type;
        obj.ss=20+round(shoot_power/2);
        obj.sp=11-round(shoot_power/10);
        obj.size=round(shoot_power/30)+1;
        //Send the shot to the server
        scr_pack_shoot_send(x,y,z,(cx-x)/100,(cy-y)/100,(cz-z)/100,shoot_type,20+round(shoot_power/2),11-round(shoot_power/10),round(shoot_power/30)+1);
        //shoot_power = 0;
        //shoot_type=0;
        can_shoot = false;
        shoot_time = shoot_delay;
        audio_play_sound(snd_gunshot,10,false);
    }
    if (mouse_check_button(mb_right))
    {
        shoot_type = 2;
        shoot_power=60;
        var obj = instance_create(x,y,obj_bomb);
        obj.z = z;
        obj.xsp=(cx-x)/100;
        obj.ysp=(cy-y)/100;
        obj.zsp=(cz-z)/100;
        obj.type=shoot_type;
        obj.ss=20+round(shoot_power/2);
        obj.sp=11-round(shoot_power/10);
        obj.size=round(shoot_power/30)+1;
        //Send the shot to the server
        scr_pack_shoot_send(x,y,z,(cx-x)/100,(cy-y)/100,(cz-z)/100,shoot_type,20+round(shoot_power/2),11-round(shoot_power/10),round(shoot_power/30)+1);
        //shoot_power = 0;
        //shoot_type=0;
        can_shoot = false;
        shoot_time = shoot_delay;
        audio_play_sound(snd_gunshot,10,false);
    }
}
else
{
    if (can_shoot==false) { shoot_time -= 1; if (shoot_time&lt;=0){shoot_time=0;can_shoot=true;}}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Chunks
/*
if (chunk_loading==true)
{
    if (load_num &lt; num_chunks)
    {
        with(obj_chunk)
        {
            if (myload==other.load_num)
            {
                x = file_text_read_real(obj_control.read_chunk);
                y = file_text_read_real(obj_control.read_chunk);
                z = file_text_read_real(obj_control.read_chunk);
                myi1 = file_text_read_real(obj_control.read_chunk);
                myi2 = file_text_read_real(obj_control.read_chunk);
                myi3 = file_text_read_real(obj_control.read_chunk);
                with (obj_control){array3d_set(other.myi1,other.myi2,other.myi3,other.id);}
                array3d_create(10,10,10);
                chunk_size = 10;
                bsize = 10;
            }
        }
        load_num += 1;
    }
    else
    {
        chunk_loading = false;
        load_num = 0;
        chunk_mod_load = true;
        file_text_close(read_chunk);
    }
}
/
if (chunk_mod_load == true)
{
    if (load_num &lt; num_chunks)
    {
        chunk_skip=true;
        while(chunk_skip==true&amp;&amp;load_num &lt; num_chunks)
        {
            with(obj_chunk)
            {
                if (myload==other.load_num)
                {
                    scr_create_chunk();
                }
            }
            load_num += 1;
        }
    }
    else
    {
        chunk_mod_load = false;
        chunk_loading = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///screen resize
//if(debug==false)
{
    if (os_browser!=browser_not_a_browser)
    {
        if (window_get_width()!=browser_width||window_get_height()!=browser_height)
        {
            window_set_size( browser_width-2, browser_height-2 );
            scr_set_window_size(browser_width, browser_height);
            window_set_position(0,0);
            mid_x = browser_width/2;
            mid_y = browser_height/2;
            www=room_width;
            hhh=room_height;
        }
    }
    else
    {
        if (window_get_width() != view_wview || window_get_height() != view_hview)
        {
            scr_set_window_size(window_get_width(),window_get_height());
            mid_x = window_get_width()/2;
            mid_y = window_get_height()/2;
            www=view_wview;
            hhh=view_hview;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///respawn
if (z+20&lt;(-(chunk_num_z+1)*10)||hp&lt;=0)
{
    if(last_hit==sock)
    {
        if (z+20&lt;(-(chunk_num_z+1)*10))
        {
            scr_pack_show_message_send(last_hit,string(name)+" has pushed himself off a cliff");
        }
        if (hp&lt;=0)
        {
            scr_pack_show_message_send(last_hit,string(name)+" has blown himself up");
        }
    }
    else
    {
        if (z+20&lt;(-(chunk_num_z+1)*10))
        {
            scr_pack_show_message_send(last_hit,string(last_hit_name)+" has pushed "+string(name)+" off a cliff");
        }
        if (hp&lt;=0)
        {
            scr_pack_show_message_send(last_hit,string(last_hit_name)+" has blown up "+string(name));
        }
    }
    my_deaths += 1;
    x = (chunk_num_x*100)/2;
    y = (chunk_num_y*100)/2;
    z = (chunk_num_z*100)+20;
    x_grav = 0;
    y_grav = 0;
    z_grav = 0;
    hp = 100;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NETWORKING
if (network==true)
{
    scr_pack_pos_send();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NETWORKING
if (network==true)
{
    var eventid = ds_map_find_value(async_load, "id");
    
    // Our socket?
    if(client == eventid)
    {
        buff = ds_map_find_value(async_load, "buffer");
        var pack_id=buffer_read(buff, buffer_u8);
        switch(pack_id)
        {
            case(pack_map):
                scr_pack_map_recieve();
            break;
            case(pack_chunk):
                scr_pack_chunk_recieve();
            break;
            case(pack_pos):
                scr_pack_pos_recieve();
            break;
            case(pack_diss):
                scr_pack_diss_recieve();
            break;
            case(pack_edit):
                scr_pack_edit_recieve();
            break;
            case(pack_shoot):
                scr_pack_shoot_recieve();
            break;
            case(pack_name):
                scr_pack_name_recieve();
            break;
            case(pack_kill_message):
                scr_pack_show_message_recieve();
            break;
            case(pack_chat):
                scr_pack_chat_recieve();
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Settings to INI
ini_open("sett.ini");
ini_write_real("Window Settings","win_width",window_get_width());
ini_write_real("Window Settings","win_height",window_get_height());
ini_write_real("Window Settings","win_x",window_get_x());
ini_write_real("Window Settings","win_y",window_get_y());
ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
fname=get_save_filename("","");
fsave = file_text_open_write(fname);

with(obj_chunk)
{
    var i=0,ii=0,iii=0;
    repeat(chunk_size)
    {
        repeat(chunk_size)
        {
            repeat(chunk_size)
            {
                file_text_write_real(obj_control.fsave,array3d_get(i,ii,iii));
                iii+=1;
            }
            ii+=1;
            iii=0;
        }
        i+=1;
        ii=0;
    }
    file_text_writeln(obj_control.fsave);
}

file_text_close(fsave);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD
d3d_set_lighting(false);
draw_set_color(c_black);


if(blood_alpha&gt;0)
{
    draw_set_alpha(blood_alpha);
    draw_background_stretched(tex_blood,0,0,window_get_width(),window_get_height());
    blood_alpha-=0.05;
    draw_set_alpha(1);
}

draw_set_font(f_main);
var tx=mid_x,ty=mid_y,tw=window_get_width(),th=window_get_height();
//fps
draw_set_color(c_black);
draw_set_alpha(0.5);
draw_rectangle(tw-100,0,tw,30,false);
draw_set_alpha(1);
draw_rectangle(tw-100,0,tw,30,true);
draw_set_color(c_white);
draw_text(tw-90,7,"FPS: "+string(fps)+"/"+string(room_speed));
//hp
draw_set_color(c_white);
draw_set_alpha(0.5);
draw_rectangle(tx-150,0,tx+150,30,false);
draw_set_alpha(1);
draw_set_color(c_red);
draw_rectangle(tx-150,0,tx-150+(hp*3),30,false);
draw_set_color(c_black);
draw_rectangle(tx-150,0,tx+150,30,true);
draw_text(tx-30,7,"HP: "+string(hp)+"/"+string(100));
//score
var iy=0,iy_size=55,ix_width=150;
with(obj_sock)
{
    draw_set_color(c_gray);
    draw_set_alpha(0.4);
    draw_rectangle(0,iy,ix_width,iy+iy_size,false);
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_rectangle(0,iy,ix_width,iy+iy_size,true);
    draw_set_color(c_white);
    draw_text(10,10+iy,name);
    draw_text(10,30+iy,"Deaths:"+string(my_deaths)+" Kills:"+string(my_kills));
    iy+=iy_size;
}

//if(debug==true)draw_text(10,10,"X:"+string(round(x))+" Y:"+string(round(y))+" Z:"+string(round(z)));

if (chunk_loading == true)
{
    //chunk downloading loading bar
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    draw_rectangle(tx-200,ty-15,tx+200,ty+15,false);
    draw_set_alpha(1);
    draw_set_color(c_green);
    draw_rectangle(tx-200,ty-15,tx-200+((400/num_chunks)*load_num),ty+15,false);
    draw_set_color(c_black);
    draw_rectangle(tx-200,ty-15,tx+200,ty+15,true);
    draw_text(tx-70,ty-8,"Downloading:"+string(num_chunks)+"/"+string(load_num));
}
else
{
    
    if(scr_col_pos_single(x,y,z)==true)
    {
        draw_background_tiled(tex_dirt,0,0);
    }
    //draw_rectangle(tx-2,ty-2,tx+2,ty+2,true);
    //Scope
    draw_sprite(spr_scope,0,tx,ty);
    //shoot powering up bar
    if(shoot_type==1)draw_set_color(c_red);
    if(shoot_type==2)draw_set_color(c_blue);
    draw_rectangle(window_get_width()-30,window_get_height(),window_get_width(),window_get_height()-(shoot_power*4),false);
    draw_set_color(c_black);
    draw_rectangle(window_get_width()-30,window_get_height(),window_get_width(),window_get_height()-(100*4),true);
    draw_set_color(c_white);
}

//set the text to center
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

//names
with(obj_sock)
{
    if (sock!=other.sock&amp;&amp;dead==false)
    {
        with(obj_control){Convert_3d(other.x,other.y,other.z+10,x,y,z+cam_off);}
        var tstr=name;
        draw_set_alpha(0.5);
        draw_set_color(c_white);
        draw_rectangle(obj_control.x_2d-4-(string_width(tstr)/2),obj_control.y_2d-2-(string_height(tstr)/2),obj_control.x_2d+4+(string_width(tstr)/2),obj_control.y_2d+1+(string_height(tstr)/2),false);
        draw_set_alpha(1);
        draw_set_color(c_black);
        draw_rectangle(obj_control.x_2d-5-(string_width(tstr)/2),obj_control.y_2d-3-(string_height(tstr)/2),obj_control.x_2d+5+(string_width(tstr)/2),obj_control.y_2d+2+(string_height(tstr)/2),true);
        draw_text(obj_control.x_2d,obj_control.y_2d,tstr);
    }
}

//draw death message
draw_set_font(f_big);
if(dm_time&gt;0){dm_time-=0.02}
if(dm_time&lt;=1){dm_alpha=dm_time;}else{dm_alpha=1;}
draw_set_alpha(dm_alpha);
draw_set_color(c_black);
draw_text((window_get_width()/2)+2,50+2,death_message);
draw_set_color(c_white);
draw_text(window_get_width()/2,50,death_message);
draw_set_alpha(1);
draw_set_font(f_main);

//undo the text
draw_set_valign(fa_top);
draw_set_halign(fa_left);

var cop=false,cstr="";
if(keyboard_check_pressed(ord("C"))){cop=true;}
if(debug==true)
{
    draw_set_color(c_black);
    draw_text(10,70,"Debug Num: "+string(ary_num));
    var it=0;
    repeat(ary_num)
    {
        draw_set_color(c_aqua);
        Convert_3d(ary_x[it],ary_y[it],ary_z[it],x,y,z);
        draw_circle(x_2d,y_2d,5,false);
        draw_set_color(c_white);
        draw_text(x_2d+7+1,y_2d+1,ary_str[it]);
        draw_set_color(c_black);
        draw_text(x_2d+7,y_2d,ary_str[it]);
        if(cop==true)
        {
            cstr+=string(ary_str[it]);
            cstr+="#";
        }
        it+=1;
    }
    if(cop==true)
    {
        clipboard_set_text(cstr);
    }
    draw_set_color(c_white);
}
scr_draw_chat();
//debug x0 y0
//Convert_3d(0,0,0,x,y,z+cam_off);
//draw_text(x_2d,y_2d,"0/0");

d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cam Look
if (os_browser!=browser_not_a_browser||cam_debug==true)
{
    if (keyboard_check_pressed(vk_enter))
    {
        
    }
    if (cam_mouse_toggle==true)
    {
        //mouse_change_x=(display_mouse_get_x()-((mid_x/2)+window_get_x()));
        //mouse_change_y=(display_mouse_get_y()-((mid_y/2)+window_get_y()));
        //display_mouse_set(window_get_x()+(mid_x/2),(mid_y/2)+window_get_y());
        mouse_change_x=display_mouse_get_x()-(display_get_width()/2);
        mouse_change_y=display_mouse_get_y()-(display_get_height()/2);
        display_mouse_set(display_get_width()/2,display_get_height()/2);
    }
    else
    {
        mouse_change_x=0;
        mouse_change_y=0;
    }
/*
    if (mouse_check_button(mb_right))
    {
        mouse_change_x=(mouse_x-mouse_x_p)*3;
        mouse_change_y=(mouse_y-mouse_y_p)*3;
    }
    else
    {
        mouse_change_x=0;
        mouse_change_y=0;
    }
    mouse_x_p = mouse_x;
    mouse_y_p = mouse_y;
    */
}
else
{
    mouse_change_x=(display_mouse_get_x()-(display_get_width()/2));
    mouse_change_y=(display_mouse_get_y()-(display_get_height()/2));
    display_mouse_set(display_get_width()/2,display_get_height()/2);
}

direction -= mouse_change_x/15;
zdir += mouse_change_y/15;
zdir=min(80,max(zdir,-80));
var cam_dis=100;
cx = x+lengthdir_x(lengthdir_x(cam_dis,zdir),direction);
cy = y+lengthdir_y(lengthdir_x(cam_dis,zdir),direction);
cz = z+lengthdir_y(cam_dis,zdir);

//zoom
if (mouse_wheel_up())
{
    zoom-=1;
}
if (mouse_wheel_down())
{
    zoom+=1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///3D Projection
draw_set_color(c_white);
scr_light_update();
d3d_set_projection_ext(x,y,z+cam_off,cx,cy,cz+cam_off,0,0,1,zoom,mid_x/mid_y,1,ren_dis);
Convert_Prepare(x,y,z+cam_off,cx,cy,cz+cam_off,0,0,1,zoom,mid_x/mid_y);
scr_render();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_audio_play_sount_at(0,0,snd_gunshot);
//screen_save(get_save_filename("",""));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chat
cam_mouse_toggle=!cam_mouse_toggle;
switch(cam_mouse_toggle)
{
    case(false):
        window_set_cursor(cr_default);
        keyboard_string="";
    break;
    case(true):
        window_set_cursor(cr_none);
        display_mouse_set(display_get_width()/2,display_get_height()/2);
        if(keyboard_string!=""){scr_pack_chat_send(keyboard_string);}
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
